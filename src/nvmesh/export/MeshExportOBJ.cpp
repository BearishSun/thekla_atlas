// This code is in the public domain -- castano@gmail.com

#include "nvmesh.h" // pch

#include "MeshExportOBJ.h"

#include "nvcore/StrLib.h"
#include "nvcore/StdStream.h"
#include "nvcore/TextWriter.h"

#include "nvmesh/halfedge/Mesh.h"
#include "nvmesh/halfedge/Vertex.h"
#include "nvmesh/halfedge/Face.h"
#include "nvmesh/halfedge/Edge.h"

using namespace nv;
using namespace nv::HalfEdge;

bool nv::exportMesh(const HalfEdge::Mesh * mesh, const char * name)
{
    nvDebugCheck(mesh != NULL);
    nvDebugCheck(name != NULL);

    if (strCaseCmp(Path::extension(name), ".obj") == 0)
    {
        StdOutputStream stream(name);
        return exportMesh_OBJ(mesh, &stream);
    }

    return false;
}

bool nv::exportMesh_OBJ(const HalfEdge::Mesh * mesh, Stream * stream)
{
    nvDebugCheck(mesh != NULL);
    nvDebugCheck(stream != NULL);

    TextWriter writer(stream);

    writer.write("# OBJ mesh generated by nvmesh (%s - %s)\n", __DATE__, __TIME__);

    // Write vertices.
    for (Mesh::ConstVertexIterator v = mesh->vertices(); !v.isDone(); v.advance())
    {
        const Vertex * vertex = v.current();
        writer.write("v %f %f %f\n", vertex->pos.x, vertex->pos.y, vertex->pos.z);
    }
    for (Mesh::ConstVertexIterator v = mesh->vertices(); !v.isDone(); v.advance())
    {
        const Vertex * vertex = v.current();
        writer.write("vt %f %f\n", vertex->tex.x, vertex->tex.y);
    }
    for (Mesh::ConstVertexIterator v = mesh->vertices(); !v.isDone(); v.advance())
    {
        const Vertex * vertex = v.current();
        writer.write("vn %f %f %f\n", vertex->nor.x, vertex->nor.y, vertex->nor.z);
    }

    // Write faces.
    for (Mesh::ConstFaceIterator f = mesh->faces(); !f.isDone(); f.advance())
    {
        const Face * face = f.current();
        
        writer.writeString("f");

        for (Face::ConstEdgeIterator e = face->edges(); !e.isDone(); e.advance())
        {
            const Vertex * vertex = e.current()->vertex;

            uint idx = vertex->id + 1;
            writer.write(" %d/%d/%d", idx, idx, idx);
        }

        writer.writeString("\n");
    }

    return true;
}
	
